---
import { Image } from "astro:assets";

import TrashIcon from "./assets/icons/trashIcon.png";

import JavaLogo from "./assets/icons/javaLogo.png";
import PythonLogo from "./assets/icons/pythonLogo.png";
import CppLogo from "./assets/icons/cppLogo.png";

import HtmlLogo from "./assets/icons/htmlLogo.png";
import JsLogo from "./assets/icons/jsLogo.png";
import TsLogo from "./assets/icons/tsLogo.png";

import ReactLogo from "./assets/icons/reactLogo.png";
import NextLogo from "./assets/icons/nextLogo.png";

import MySqlLogo from "./assets/icons/mySqlLogo.png";
import DigitalOceanLogo from "./assets/icons/digitalOceanLogo.png";

import NotepadIcon from "./assets/icons/notepadIcon.png";
import FolderIcon from "./assets/icons/folderIcon.png";
import VlcIcon from "./assets/icons/vlcIcon.png";

import HIMLogo from "./assets/icons/heartInMotionLogo.png";
import InflucioLogo from "./assets/icons/influcioLogo.jpeg"
import iGEMLogo from "./assets/icons/iGEMLogo.png"

import SeniorImage from "./assets/images/seniorImage.jpeg";

const backgroundDesc =
  "Hi! My name is Andrew Lau and I grew up in San Francisco, California. I learnt how to code in 8th grade during the COVID-19 quarantine (2020), picking up C# and Java skills from Unity game development.\n\nEventually, I wanted to do more than developing games and began fiddling with both software and web development, honing the skills I have today.\n\nDuring my junior year of high school at Galileo Academy of Science and Technology, I kickstarted my professional career as a Software Engineer by developing the website for the non-profit Heart in Motion and maintaining their back-end systems.\n\nNow, as a first year at UC Berkeley, I am dedicated to my many personal projects focused on helping others and benefiting society as a whole. If you want to learn more or join me in my journey of using software to build a better Earth, feel free to reach out!\n\n[Continue scrolling for more]";

const appData = [
  {
    name: "Trash",
    imgSrc: TrashIcon,
  },
];

const techStackData = [
  { name: "Java", imgSrc: JavaLogo },
  { name: "Python", imgSrc: PythonLogo },
  { name: "C++", imgSrc: CppLogo },

  { name: "HTML", imgSrc: HtmlLogo },
  { name: "JavaScript", imgSrc: JsLogo },
  { name: "TypeScript", imgSrc: TsLogo },

  { name: "React", imgSrc: ReactLogo },
  { name: "Next.js", imgSrc: NextLogo },

  { name: "MySQL", imgSrc: MySqlLogo },
  { name: "DigitalOcean", imgSrc: DigitalOceanLogo },
];

const aboutNavigationAppData = [
  {
    name: "Background",
    imgSrc: NotepadIcon,
  },
  {
    name: "Tech Stack",
    imgSrc: FolderIcon,
  },
  {
    name: "Experience",
    imgSrc: VlcIcon,
  },
];

const experienceData = [
  {
    companyName: "Heart in Motion",
    companyLocation: "San Francisco, CA",
    companyLogo: HIMLogo,
    jobTitle: "Technical Lead & Fullstack Developer",
    duration: "Aug 2022 - June 2025",
    description: [
      "Built and maintained the official website using Next.js (React), TypeScript, Prisma, and MySQL.",
      "Managed and deployed backend infrastructure on DigitalOcean and Azure.",
    ],
  },
  {
    companyName: "Stanford iGEM",
    companyLocation: "Palo Alto, CA",
    companyLogo: iGEMLogo,
    jobTitle: "Teaching Assistant",
    duration: "June 2025 - Present",
    description: [],
  },
  {
    companyName: "Influcio",
    companyLocation: "San Francisco, CA",
    companyLogo: InflucioLogo,
    jobTitle: "Software Engineer Intern",
    duration: "June 2025 - Present",
    description: [
      "Engineered and maintained scalable backend APIs using Python and Golang to support core platform functionality.",
    ],
  },
  {
    companyName:
      "Feel free to explore this page before scrolling to projects : )",
    companyLogo: SeniorImage,
    jobTitle: "That's all about me!",
  },
];
---

<section id="about-container" class="relative h-[12000px]">
  <div id="about" class="sticky top-3 h-[calc(100dvh-52px)] overflow-y-scroll">
    <div
      class="h-full bg-[url(/assets/images/wallpaper.jpg)]"
    >
      <div
        class="bg-black/20 h-5 flex items-center text-white text-sm py-3 select-none"
      >
        <div class="pl-3 flex items-center gap-1 w-[20%] min-w-fit">
          <i class="bx bx-notification"></i>
        </div>
        <div class="flex-grow flex justify-center items-center text-center">
          <span id="name-time">andrewlau</span>
        </div>
        <div class="pr-3 flex items-center gap-1 justify-end w-[20%] min-w-fit">
          <i class="bx bx-wifi"></i>
          <i class="bx bxs-volume-full"></i>
          <i class="bx bxs-battery"></i>
        </div>
      </div>
      <div>
        <div
          class="m-3 grid grid-cols-1 gap-6 justify-items-start overflow-y-auto w-fit p-3"
        >
          {
            appData.map((app) => (
              <div
                id="app"
                class="w-20 h-20 flex flex-col items-center justify-center rounded-lg"
              >
                <Image
                  src={app.imgSrc}
                  alt={app.name}
                  draggable="false"
                  loading="eager"
                  class="h-15 w-15 object-contain flex flex-col mb-1 p-1"
                />
                <span class="flex flex-col text-xs font-medium text-white text-shadow-md px-1">
                  {app.name}
                </span>
              </div>
            ))
          }
        </div>
        <div
          class="absolute bottom-1 left-1/2 transform -translate-x-1/2 flex justify-center items-center px-7 py-2 gap-4 mb-1"
        >
          {
            aboutNavigationAppData.map((item, index) => (
              <div
                class="group app-nav-item flex flex-col items-center gap-1 text-white text-xs font-medium"
                data-index={index}
              >
                <Image
                  src={item.imgSrc}
                  alt={item.name}
                  draggable="false"
                  loading="eager"
                  class="h-14 w-14 object-contain p-1 group-hover:bg-white/30 rounded-md"
                />
                <div class="indicator-bar bg-white h-1 rounded-full" />
              </div>
            ))
          }
        </div>
      </div>

      <div id="window" class="absolute w-full h-full top-0 left-0">
        <div
          id="window-0"
          class="border-1 border-slate-300/10 draggable-window absolute top-[9vh] lg:left-[17vw] left-[4vw] lg:w-[62vw] w-[90vw] h-[60vh] pointer-events-auto"
        >
          <div
            id="draggable-window-tab"
            class="relative w-full bg-[#3c4657] h-7 flex items-center"
          >
            <div
              class="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 text-center"
            >
              <span class="text-sm text-slate-300/85 font-medium"
                >andrewlau@background</span
              >
            </div>
            <div
              class="mr-3 flex items-center justify-end w-[20%] min-w-fit ml-auto"
            >
              <i
                class="bx bx-x-circle pl-2 close-window text-lg hover:text-slate-400 text-slate-500"
              ></i>
            </div>
          </div>
          <div class="w-full h-full">
            <div
              class="hidden bg-[#4a5467] md:flex flex-row text-center h-7 text-sm border-y-1 border-y-slate-800/30"
            >
              <span class="px-3 py-1 hover:bg-white/20">File</span>
              <span class="px-3 py-1 hover:bg-white/20">Edit</span>
              <span class="px-3 py-1 hover:bg-white/20">View</span>
              <span class="px-3 py-1 hover:bg-white/20">Selection</span>
              <span class="px-3 py-1 hover:bg-white/20">Find</span>
              <span class="px-3 py-1 hover:bg-white/20">Packages</span>
              <span class="px-3 py-1 hover:bg-white/20">Help</span>
            </div>
            <div
              class="flex flex-col w-full bg-[#4b5568]/90 md:pb-0 pb-4 py-3 h-full px-4"
            >
              <div class="bg-blur"></div>
              <div
                contenteditable="true"
                class="textarea h-full mb-5 resize-none p-2 text-white bg-transparent outline-none w-full whitespace-pre-wrap overflow-y-auto"
              >{backgroundDesc}</div>
            </div>
          </div>
        </div>
        <div
          id="scroll-message"
          class="absolute top-1/4 left-1/2 -translate-x-1/2 text-slate-800/40 font-light md:text-3xl flex flex-col items-center gap-4 w-full text-lg"
        >
          <span>Try scrolling down!</span>
          <i
            class="bx bx-chevrons-down text-3xl text-slate-800/40 animate-bounce"
          ></i>
        </div>
        <div
          id="window-1"
          class="border-1 border-slate-300/10 draggable-window absolute top-[10vh] lg:left-[18.5vw] left-[4vw] lg:w-[62vw] w-[90vw] h-[60vh] pointer-events-auto"
        >
          <div
            id="draggable-window-tab"
            class="relative w-full bg-[#3c4657] h-7 flex items-center"
          >
            <div
              class="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 text-center"
            >
              <span class="text-sm text-slate-300/85 font-medium"
                >andrewlau@techstack</span
              >
            </div>
            <div
              class="mr-3 flex items-center justify-end w-[20%] min-w-fit ml-auto"
            >
              <i
                class="bx bx-x-circle pl-2 close-window text-lg hover:text-slate-400 text-slate-500"
              ></i>
            </div>
          </div>
          <div class="w-full h-full bg-[#4a5467]">
            <div
              class="hidden md:flex flex-row text-center h-7 text-sm border-y-1 border-y-slate-800/30"
            >
              <span class="px-3 py-1 hover:bg-white/20">File</span>
              <span class="px-3 py-1 hover:bg-white/20">Edit</span>
              <span class="px-3 py-1 hover:bg-white/20">View</span>
              <span class="px-3 py-1 hover:bg-white/20">Go</span>
              <span class="px-3 py-1 hover:bg-white/20">Bookmarks</span>
              <span class="px-3 py-1 hover:bg-white/20">Help</span>
            </div>
            <div
              class="flex flex-row w-full bg-[#444e61] md:pb-0 pb-4 py-3 h-full"
            >
              <div
                class="hidden md:flex flex-col w-[15%] text-sm text-slate-300 select-none h-full"
              >
                <ul
                  class="flex flex-col text-slate-300 gap-1 pl-3 pr-2 border-r-2 border-r-slate-800/35 h-full"
                >
                  <li
                    class="px-4 rounded flex items-center gap-2 -translate-x-4 font-medium"
                  >
                    <span class="truncate max-w-[200px] block">▼ About Me</span>
                  </li>
                  <li
                    class="px-4 hover:bg-slate-200/10 rounded flex items-center gap-2"
                  >
                    <i class="bx bx-desktop text-slate-400"></i>
                    <span class="truncate max-w-[200px] block">Tech Stack</span>
                  </li>
                  <li
                    class="px-4 rounded flex items-center gap-2 -translate-x-4 font-medium"
                  >
                    <span class="truncate max-w-[200px] block"
                      >▼ My Computer</span
                    >
                  </li>
                  <li
                    class="px-4 hover:bg-slate-200/10 rounded flex items-center gap-2"
                  >
                    <i class="bx bx-home-alt text-slate-400"></i>
                    <span class="truncate max-w-[200px] block">Home</span>
                  </li>
                  <li
                    class="px-4 hover:bg-slate-200/10 rounded flex items-center gap-2"
                  >
                    <i class="bx bx-desktop text-slate-400"></i>
                    <span class="truncate max-w-[200px] block">Desktop</span>
                  </li>
                  <li
                    class="px-4 hover:bg-slate-200/10 rounded flex items-center gap-2"
                  >
                    <i class="bx bx-folder text-slate-400"></i>
                    <span class="truncate max-w-[200px] block">Documents</span>
                  </li>
                </ul>
              </div>
              <div
                class="flex flex-wrap md:gap-5 gap-8 p-4 overflow-y-auto min-h-fit sm:h-fit md:justify-start justify-center"
              >
                {
                  techStackData.map((app) => (
                    <div
                      id="tech-stack-app"
                      class="md:w-20 w-18 md:h-20 h-18 flex flex-col items-center justify-center rounded-lg"
                    >
                      <Image
                        src={app.imgSrc}
                        alt={app.name}
                        draggable="false"
                        class="h-18 w-18 object-contain mb-1 p-1"
                        loading="eager"
                      />
                      <span class="text-xs font-medium text-white text-shadow-md text-center px-1">
                        {app.name}
                      </span>
                    </div>
                  ))
                }
              </div>
            </div>
          </div>
        </div>

        <div
          id="window-2"
          class="border-1 border-slate-300/10 draggable-window absolute top-[11vh] lg:left-[20vw] left-[4vw] lg:w-[62vw] w-[90vw] h-[60vh] pointer-events-auto"
        >
          <div
            id="draggable-window-tab"
            class="relative w-full bg-[#3c4657] h-7 flex items-center"
          >
            <div
              class="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 text-center"
            >
              <span class="text-sm text-slate-300/85 font-medium"
                >andrewlau@workexperience</span
              >
            </div>
            <div
              class="mr-3 flex items-center justify-end w-[20%] min-w-fit ml-auto"
            >
              <i
                class="bx bx-x-circle pl-2 close-window text-lg hover:text-slate-400 text-slate-500"
              ></i>
            </div>
          </div>
          <div class="w-full h-full">
            <div
              class="bg-slate-100 flex flex-row text-center h-7 text-sm border-y-1 border-y-slate-800/30 text-slate-600 sm:text-xs"
            >
              <span class="px-3 py-1 hover:bg-black/10">Media</span>
              <span class="px-3 py-1 hover:bg-black/10 sm:flex hidden"
                >Playback</span
              >
              <span class="px-3 py-1 hover:bg-black/10">Audio</span>
              <span class="px-3 py-1 hover:bg-black/10 sm:flex hidden"
                >Subtitle</span
              >
              <span class="px-3 py-1 hover:bg-black/10">Tools</span>
              <span class="px-3 py-1 hover:bg-black/10">View</span>
              <span class="px-3 py-1 hover:bg-black/10">Help</span>
            </div>
            <div class="flex flex-col w-full h-full">
              <div
                class="flex flex-col w-full h-[400px] relative bg-[url(/assets/images/chalkboardBackground.jpg)] bg-cover overflow-hidden"
              >
                <div
                  class="absolute inset-x-0 bottom-0 h-1/2 pointer-events-none"
                  style={{
                    background:
                      "linear-gradient(to top, rgba(0,0,0,0.5), transparent)",
                    zIndex: 10,
                  }}
                >
                </div>
                {
                  experienceData.map((exp, index) => (
                    <div
                      id={`experience-${index}`}
                      class="absolute inset-0 flex items-center justify-center text-white w-full clip-start-hidden"
                      style={{ paddingLeft: "2.5rem", paddingRight: "2.5rem" }}
                    >
                      <div class="w-full max-w-3xl min-w-0">
                        {" "}
                        <div class="flex flex-row items-center mb-2 min-w-0">
                          {" "}
                          <div class="w-24 md:w-32 flex-shrink-0">
                            <Image
                              src={exp.companyLogo}
                              alt={exp.companyName}
                              loading="eager"
                              class="w-24 h-24 md:w-32 md:h-32 bg-white chalky-mask object-cover"
                            />
                          </div>
                          <h3
                            class="ml-4 flex-1 text-3xl sm:text-4xl font-bold break-words"
                            style={{ fontFamily: "'chalk-board', regular" }}
                          >
                            {exp.jobTitle}
                          </h3>
                        </div>
                        <p
                          class="text-base sm:text-lg mb-2 break-words"
                          style={{ fontFamily: "'chalk-board', regular" }}
                        >
                          {exp.companyName}
                          {exp.companyLocation && (
                            <span
                              class="italic text-sm ml-2"
                              style={{ fontFamily: "'chalk-board', regular" }}
                            >
                              ({exp.companyLocation})
                            </span>
                          )}
                        </p>
                        {exp.duration && (
                          <p
                            class="text-md sm:text-xl text-white mb-3"
                            style={{ fontFamily: "'chalk-board', regular" }}
                          >
                            {exp.duration}
                          </p>
                        )}
                        {exp.description && (
                          <div
                            class="text-sm sm:text-lg leading-relaxed whitespace-pre-line"
                            style={{ fontFamily: "'chalk-board', regular" }}
                          >
                            <ul class="list-disc list-inside">
                              {exp.description.map((point) => (
                                <li
                                  style={{
                                    fontFamily: "'chalk-board', regular",
                                  }}
                                >
                                  {point}
                                </li>
                              ))}
                            </ul>
                          </div>
                        )}
                      </div>
                    </div>
                  ))
                }
              </div>
              <div
                class="w-full bg-gray-100 border-t border-gray-300 text-sm text-slate-700"
              >
                <div class="flex items-center justify-between px-4 pt-2">
                  <span id="vlc-timestamp" class="text-xs">0:00</span>

                  <div
                    class="flex-1 mx-4 relative h-2 rounded bg-gray-300 overflow-hidden"
                  >
                    <div
                      id="vlc-timeline"
                      class="absolute top-0 left-0 h-full bg-blue-500"
                    >
                    </div>
                  </div>

                  <span class="text-xs">10:00</span>
                </div>

                <div
                  class="flex items-center justify-between px-4 py-2 h-18 text-slate-500 gap-7"
                >
                  <div class="flex items-center gap-5 text-3xl">
                    <div id="vlc-play">
                      <i
                        class="bx bx-play hover:text-slate-700 border-1 rounded-sm border-slate-300 shadow-sm"
                      ></i>
                    </div>
                    <div id="vlc-pause" class="hidden">
                      <i
                        class="bx bx-pause hover:text-slate-700 border-1 rounded-sm border-slate-300 shadow-sm"
                      ></i>
                    </div>
                    <div class="flex gap-2">
                      <i
                        id="vlc-rewind"
                        class="bx bx-rewind hover:text-slate-700 border-1 rounded-sm border-slate-300 shadow-sm"
                      ></i>
                      <i
                        id="vlc-stop"
                        class="bx bx-stop hover:text-slate-700 border-1 rounded-sm border-slate-300 shadow-sm"
                      ></i>
                      <i
                        id="vlc-forward"
                        class="bx bx-fast-forward hover:text-slate-700 border-1 rounded-sm border-slate-300 shadow-sm"
                      ></i>
                    </div>
                    <div class="lg:flex hidden gap-2">
                      <i
                        class="bx bx-fullscreen hover:text-slate-700 border-1 rounded-sm border-slate-300 shadow-sm"
                      ></i>
                      <i
                        class="bx bx-slider hover:text-slate-700 border-1 rounded-sm border-slate-300 shadow-sm"
                      ></i>
                    </div>
                    <div class="md:flex hidden gap-2">
                      <i
                        class="bx bx-list-ul hover:text-slate-700 border-1 rounded-sm border-slate-300 shadow-sm"
                      ></i>
                      <i
                        class="bx bx-repeat hover:text-slate-700 border-1 rounded-sm border-slate-300 shadow-sm"
                      ></i>
                      <i
                        class="bx bx-exit hover:text-slate-700 border-1 rounded-sm border-slate-300 shadow-sm"
                      ></i>
                    </div>
                  </div>

                  <div class="flex items-center gap-2 min-w-[160px]">
                    <i class="bx bxs-volume-full text-xl"></i>
                    <div class="relative w-[80px] h-[30px]">
                      <div
                        class="w-full h-full bg-gray-300"
                        style="clip-path: polygon(0% 100%, 100% 100%, 100% 0%);"
                      >
                        <div
                          class="w-[80%] h-full bg-green-500"
                          style="clip-path: polygon(0% 100%, 100% 100%, 100% 0%);"
                        >
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  #app:hover * {
    border-radius: 6px;
    background-color: rgba(255, 255, 255, 0.2);
  }
  #tech-stack-app:hover * {
    border-radius: 6px;
    background-color: rgba(255, 255, 255, 0.1);
  }
  #window {
    pointer-events: none;
  }

  #window .draggable-window {
    pointer-events: auto;
  }

  [id^="window-"] {
    opacity: 0;
    pointer-events: none;
    transform: scale(0.9);
    transition:
      opacity 0.3s ease,
      transform 0.3s ease;
    display: block;
    position: absolute;
    visibility: hidden;
  }

  [id^="window-"].visible {
    opacity: 1;
    pointer-events: auto;
    transform: scale(1);
    visibility: visible;
  }

  [id^="window-"]visible.zoom-in {
    display: block;
    opacity: 1;
    pointer-events: auto;
    transform: scale(1);
  }

  .app-nav-item .indicator-bar {
    transition: width 0.3s ease-in-out;
    width: 0;
  }

  .app-nav-item.active .indicator-bar {
    width: 1.75rem;
  }

  .app-nav-item.active:hover .indicator-bar {
    width: 2.25rem;
  }

  .app-nav-item.inactive .indicator-bar {
    width: 0;
  }

  @keyframes zoomOut {
    0% {
      opacity: 1;
      transform: scale(1);
    }
    100% {
      opacity: 0;
      transform: scale(0.9);
    }
  }

  .window-exit {
    animation: zoomOut 0.3s ease forwards;
    pointer-events: none;
  }

  .bg-blur {
    width: 95%;
    height: 95%;
    position: absolute;
    pointer-events: none;
    z-index: -1;
    backdrop-filter: blur(1.5px);
    transition: backdrop-filter 0.3s ease;
  }

  .clip-start-hidden {
    clip-path: polygon(0 0, 0 0, 0 0, 0 0);
  }

  .chalky-mask {
    -webkit-mask-image: url("/assets/images/chalkOverlay.png");
    mask-image: url("/assets/images/chalkOverlay.png");

    -webkit-mask-repeat: no-repeat;
    mask-repeat: no-repeat;

    -webkit-mask-size: 100% 100%;
    mask-size: 100% 100%;

    -webkit-mask-position: center;
    mask-position: center;
  }

  @media (max-width: 768px) {
    #vlc-play {
      display: none;
    }
  }
</style>

<script>
  function updateTime() {
    const date = new Date();
    const hours = date.getHours();
    const minutes = date.getMinutes();

    const currentTime = `${hours}:${minutes < 10 ? "0" + minutes : minutes}`;

    const nameTimeElement = document.getElementById("name-time");
    if (nameTimeElement) nameTimeElement.innerHTML = "andrewlau " + currentTime;
  }

  updateTime();
  setInterval(updateTime, 1000);
</script>

<script is:inline>
  let chooseElement = null;
  let startMouse = { x: 0, y: 0 };
  let startPos = { x: 0, y: 0 };
  let containerRect;
  let maxZIndex = 1;

  document.addEventListener("DOMContentLoaded", () => {
    let container = document.getElementById("window");
    containerRect = container.getBoundingClientRect();

    const draggableWindows = document.querySelectorAll(".draggable-window");

    window.addEventListener("resize", () => {
      container = document.getElementById("window");
      containerRect = container.getBoundingClientRect();
    });

    draggableWindows.forEach((window) => {
      const tab = window.querySelector("#draggable-window-tab");

      window.style.position = "absolute";
      window.style.zIndex = "1";

      window.addEventListener("mousedown", () => {
        maxZIndex++;
        window.style.zIndex = maxZIndex;
      });

      if (tab) {
        tab.addEventListener("mousedown", (e) => {
          chooseElement = window;

          maxZIndex++;
          chooseElement.style.zIndex = maxZIndex.toString();

          startMouse.x = e.clientX;
          startMouse.y = e.clientY;

          const computedStyle = getComputedStyle(chooseElement);
          startPos.x = parseFloat(computedStyle.left);
          startPos.y = parseFloat(computedStyle.top);

          e.preventDefault();
        });
      }
    });

    document.addEventListener("mousemove", (e) => {
      if (!chooseElement) return;

      const deltaX = e.clientX - startMouse.x;
      const deltaY = e.clientY - startMouse.y;

      let newLeft = startPos.x + deltaX;
      let newTop = startPos.y + deltaY;

      const elemRect = chooseElement.getBoundingClientRect();

      if (newLeft < 0) newLeft = 0;
      if (newLeft + elemRect.width > containerRect.width) {
        newLeft = containerRect.width - elemRect.width;
      }

      if (newTop < 24) newTop = 24;
      if (newTop + elemRect.height > containerRect.height - 56) {
        newTop = containerRect.height - elemRect.height - 56;
      }

      chooseElement.style.left = newLeft + "px";
      chooseElement.style.top = newTop + "px";
    });

    document.addEventListener("mouseup", () => {
      chooseElement = null;
    });

    const scrollContent = document.getElementById("scroll-container");
    const backgroundWindow = document.getElementById("window-0");
    const techStackWindow = document.getElementById("window-1");
    const experienceWindow = document.getElementById("window-2");
    const navItems = document.querySelectorAll(".app-nav-item");
    const closeButtons = document.querySelectorAll(".close-window");

    const vlcPlayElement = document.getElementById("vlc-play");
    const vlcPauseElement = document.getElementById("vlc-pause");
    const vlcStopElement = document.getElementById("vlc-stop");
    const vlcForwardElement = document.getElementById("vlc-forward");
    const vlcRewindElement = document.getElementById("vlc-rewind");

    let vlcPlaying = false;

    function vlcStop() {
      vlcPlaying = false;
      vlcPlayElement.classList.remove("hidden");
      vlcPauseElement.classList.add("hidden");
    }

    scrollContent.addEventListener("wheel", () => {
      vlcStop();
    });

    vlcPlayElement.addEventListener("click", () => {
      if (vlcPlaying) return;
      vlcPlaying = true;

      vlcPlayElement.classList.add("hidden");
      vlcPauseElement.classList.remove("hidden");

      function scrollStep() {
        if (!vlcPlaying) return;

        scrollContent.scrollTop += 10;

        scrollTimeout = setTimeout(scrollStep, 1);
      }

      if (scrollContent.scrollTop < 5000) {
        scrollContent.scrollTop = 5000;

        const waitForScroll = setInterval(() => {
          if (scrollContent.scrollTop >= 5000) {
            clearInterval(waitForScroll);
            scrollStep();
          }
        }, 10);
      } else {
        scrollStep();
      }
    });

    vlcPauseElement.addEventListener("click", () => {
      vlcStop();
    });

    vlcStopElement.addEventListener("click", () => {
      vlcStop();
      if (scrollContent.scrollTop > 5000) scrollContent.scrollTop = 5000;
    });

    vlcForwardElement.addEventListener("click", () => {
      vlcStop();
      if (
        scrollContent.scrollTop + 300 <
        document.getElementById("about").parentElement.offsetHeight
      )
        scrollContent.scrollTop += 300;
      else
        scrollContent.scrollTop =
          document.getElementById("about").parentElement.offsetHeight;
    });

    vlcRewindElement.addEventListener("click", () => {
      vlcStop();
      if (scrollContent.scrollTop - 300 > 5000) scrollContent.scrollTop -= 300;
      else scrollContent.scrollTop = 5000;
    });

    navItems.forEach((item, i) => {
      item.addEventListener("click", () => {
        const windowContent = document.getElementById(`window-${i}`);
        if (item.classList.contains("active")) {
          windowContent.classList.add("window-exit");
          setTimeout(() => {
            windowContent.classList.remove("visible", "window-exit");
          }, 300);
          windowContent.style.zIndex = ++maxZIndex;
          item.classList.remove("active");
          item.classList.add("inactive");
        } else {
          windowContent.classList.add("visible");
          windowContent.style.zIndex = ++maxZIndex;
          item.classList.add("active");
          item.classList.remove("inactive");
        }
      });
    });

    closeButtons.forEach((item, i) => {
      item.addEventListener("click", () => {
        const windowContent = document.getElementById(`window-${i}`);
        windowContent.classList.add("window-exit");
        setTimeout(() => {
          windowContent.classList.remove("visible", "window-exit");
        }, 300);
        windowContent.style.zIndex = ++maxZIndex;
        navItems[i].classList.remove("active");
        navItems[i].classList.add("inactive");
      });
    });

    let lastScrollTop = 0;

    scrollContent.addEventListener("scroll", () => {
      const scrollY = scrollContent.scrollTop;
      const isScrollingUp = scrollY < lastScrollTop;
      lastScrollTop = scrollY;

      if (scrollY < 1500) {
        if (isScrollingUp) {
          backgroundWindow.classList.add("window-exit");
          navItems[0]?.classList.add("inactive");
          navItems[0]?.classList.remove("active");
          setTimeout(() => {
            backgroundWindow.classList.remove("visible", "window-exit");
          }, 300);
        }
      } else if (scrollY >= 1500 && scrollY < 2300) {
        backgroundWindow.classList.add("visible");

        if (
          (!techStackWindow.classList.contains("visible") ||
            !experienceWindow.classList.contains("visible")) &&
          !vlcPlaying
        ) {
          maxZIndex++;
          backgroundWindow.style.zIndex = maxZIndex;
        }

        navItems[0]?.classList.remove("inactive");
        navItems[0]?.classList.add("active");

        if (isScrollingUp) {
          techStackWindow.classList.add("window-exit");
          navItems[1]?.classList.add("inactive");
          navItems[1]?.classList.remove("active");

          experienceWindow.classList.add("window-exit");
          navItems[2]?.classList.add("inactive");
          navItems[2]?.classList.remove("active");

          setTimeout(() => {
            techStackWindow.classList.remove("visible", "window-exit");
            experienceWindow.classList.remove("visible", "window-exit");
          }, 300);
        }
      } else if (scrollY >= 3000 && scrollY <= 4500) {
        if (
          (!experienceWindow.classList.contains("visible") ||
            !techStackWindow.classList.contains("visible")) &&
          !vlcPlaying
        ) {
          maxZIndex++;
          techStackWindow.style.zIndex = maxZIndex;
        }

        techStackWindow.classList.add("visible");

        navItems[1]?.classList.remove("inactive");
        navItems[1]?.classList.add("active");

        if (isScrollingUp) {
          experienceWindow.classList.add("window-exit");
          navItems[2]?.classList.add("inactive");
          navItems[2]?.classList.remove("active");
          setTimeout(() => {
            experienceWindow.classList.remove("visible", "window-exit");
          }, 300);
        }
      } else if (scrollY >= 4700) {
        experienceWindow.classList.add("visible");

        if (!isScrollingUp) {
          maxZIndex++;
          experienceWindow.style.zIndex = maxZIndex;
        }

        navItems[2]?.classList.remove("inactive");
        navItems[2]?.classList.add("active");

        const timelineElement = document.getElementById("vlc-timeline");
        const timestampElement = document.getElementById("vlc-timestamp");

        const timelineStart = 5000;
        const timelineEnd =
          document.getElementById("about").parentElement.offsetHeight;

        const timelineProgress = Math.min(
          Math.max(
            (scrollY - timelineStart) / (timelineEnd - timelineStart),
            0
          ),
          1
        );

        if (timelineProgress == 1) vlcPlaying = false;

        const totalSeconds = 600;
        const timestampProgress = totalSeconds * timelineProgress;

        const minutes = Math.floor(timestampProgress / 60);
        const seconds = Math.floor(timestampProgress % 60);

        const formattedTime = `${minutes}:${seconds.toString().padStart(2, "0")}`;

        const timelineWidth = timelineProgress * 100;

        timelineElement.style.width = `${timelineWidth}%`;
        timestampElement.innerHTML = formattedTime;

        const experienceLength = 2;

        const experienceDuration =
          (timelineEnd - timelineStart) / experienceLength;

        const currentExperienceIndex = Math.floor(
          (scrollY - timelineStart) / experienceDuration
        );

        for (let i = 0; i < experienceLength; i++) {
          const el = document.getElementById("experience-" + i);
          if (el) el.classList.add("hidden");
        }

        const currentExperienceElement = document.getElementById(
          "experience-" + currentExperienceIndex
        );

        if (currentExperienceElement) {
          currentExperienceElement.classList.remove("hidden");

          const segmentStart =
            timelineStart + currentExperienceIndex * experienceDuration;

          const segmentProgress = Math.min(
            Math.max((scrollY - segmentStart) / experienceDuration, 0),
            1
          );

          const appearDuration = 0.5;
          const visibleDuration = 0.4;
          const leaveDuration = 0.1;

          let clipProgress;

          if (segmentProgress < appearDuration) {
            clipProgress = (segmentProgress / appearDuration) * 100;
          } else if (segmentProgress < appearDuration + visibleDuration) {
            clipProgress = 100;
          } else {
            clipProgress = ((1 - segmentProgress) / leaveDuration) * 100;
          }

          currentExperienceElement.style.clipPath = `polygon(0 0, ${clipProgress}% 0, ${clipProgress}% 100%, 0 100%)`;
        }
      }

      const scrollMessage = document.getElementById("scroll-message");

      const fadeStart = 1000;
      const fadeEnd = 1400;

      let opacity = 1;

      if (scrollY > fadeStart) {
        opacity =
          1 - Math.min((scrollY - fadeStart) / (fadeEnd - fadeStart), 1);
      }

      scrollMessage.style.opacity = opacity;
    });
  });
</script>
