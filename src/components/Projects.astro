---
import { Image } from "astro:assets";
import ChatGPTLogo from "./assets/icons/chatGptLogo.png";
import SoraIcon from "./assets/icons/soraIcon.png";
import ProfilePicture from "./assets/images/andrewlau624.jpg";

const projectsData = [
  {
    title: "DebateSphere",
    description:
      "A real-time debate platform with live audio, timer controls, and audience voting built using WebRTC, Socket.IO, and Next.js.",
    tech: ["Next.js", "WebRTC", "Socket.IO", "Tailwind CSS"],
    demo: "https://debatesphere.example.com",
    code: "https://github.com/yourusername/debatesphere",
  },
  {
    title: "Heart in Motion Dashboard",
    description:
      "An internal management dashboard for a nonprofit to track volunteer hours, projects, and event scheduling.",
    tech: ["React", "Firebase", "Tailwind CSS"],
    demo: "https://him-dashboard.example.com",
    code: "https://github.com/yourusername/him-dashboard",
  },
  {
    title: "Chinatown Connect",
    description:
      "A mobile-first directory for local Chinatown businesses, complete with filtering, reviews, and maps integration.",
    tech: ["Next.js", "Supabase", "Mapbox", "Vercel"],
    demo: "https://chinatown-connect.example.com",
    code: "https://github.com/yourusername/chinatown-connect",
  },
  {
    title: "CodeBuddy",
    description:
      "A collaborative code editor for remote tutoring sessions with syntax highlighting and real-time chat.",
    tech: ["Monaco Editor", "Node.js", "Socket.IO", "Express"],
    demo: "https://codebuddy.example.com",
    code: "https://github.com/yourusername/codebuddy",
  },
  {
    title: "ZenStudy",
    description:
      "A Pomodoro timer and task manager designed for students with gentle animations and focus mode.",
    tech: ["React", "Framer Motion", "LocalStorage"],
    demo: "https://zenstudy.example.com",
    code: "https://github.com/yourusername/zenstudy",
  },
  {
    title: "VolunteerVerse",
    description:
      "A platform that gamifies volunteering by allowing students to earn badges and track hours in a social feed.",
    tech: ["Next.js", "MongoDB", "Clerk", "Tailwind"],
    demo: "https://volunteerverse.example.com",
    code: "https://github.com/yourusername/volunteerverse",
  },
];

const chatCategoryData = [
  {
    name: "Projects",
    chats: [{
      name: "Andrew's Projects",
      id: "myprojects",
      chatData: projectsData,
      openingMessage: "Can you show me Andrew Lau's portfolio projects?",
      openingResponse: "Sure! Here's a clean list of Andrew Lau's projects!"
    }],
  },
  {
    name: "More",
    chats: [
      {
        name: "Publications",
        id: "publications",
        chatData: projectsData,
        openingMessage: "Do you have any published work?",
        openingResponse: "These are Andrew's publications."
      },
      {
        name: "Awards",
        id: "awards",
        chatData: projectsData,
        openingMessage: "What awards have you won?",
        openingResponse: "Here are some notable awards."
      },
    ],
  },
];
---

<section id="projects" class="h-[calc(100dvh-52px)]">
  <div class="flex flex-row h-full w-full overflow-y-hidden">
    <div
      class="md:flex hidden flex-col h-full sm:w-[300px] w-[400px] bg-[#171717] text-slate-100 font-[350] px-1"
    >
      <div
        class="flex justify-between items-center px-2 py-2 sticky top-0 bg-[#171717] z-10"
      >
        <i
          class="bx bx-book-content bx-flip-horizontal text-2xl cursor-pointer hover:bg-white/5 p-2 rounded-lg"
        ></i>
        <div class="flex">
          <i
            class="bx bx-search text-2xl cursor-pointer hover:bg-white/5 p-2 rounded-lg"
          ></i>
          <i
            class="bx bx-edit text-2xl cursor-pointer hover:bg-white/5 p-2 rounded-lg"
          ></i>
        </div>
      </div>
      <ul class="flex flex-col px-2 pb-4 text-sm">
        <li
          class="flex items-center gap-3 px-3 py-2 hover:bg-white/5 rounded-lg cursor-pointer"
        >
          <Image
            src={ChatGPTLogo}
            alt="ChatGPT"
            class="h-6 w-6 object-contain border-1 p-0.5 rounded-full border-slate-400/40"
          />
          <span>ChatGPT</span>
        </li>

        <li
          class="flex items-center gap-3 px-3 py-2 hover:bg-white/5 rounded-lg cursor-pointer"
        >
          <Image
            src={SoraIcon}
            alt="Sora"
            class="h-6 w-6 object-contain rounded-full border-slate-400/40"
          />
          <span>Sora</span>
        </li>

        <li
          class="flex items-center gap-3 px-3 py-2 hover:bg-white/5 rounded-lg cursor-pointer"
        >
          <i class="bx bx-images text-lg mr-1"></i>
          <span>Library</span>
        </li>

        <li
          class="flex items-center gap-3 px-3 py-2 hover:bg-white/5 rounded-lg cursor-pointer"
        >
          <i class="bx bx-grid-alt text-lg mr-1"></i>
          <span>Explore GPTs</span>
        </li>
      </ul>
      <div class="flex flex-col gap-4 mt-2">
        {
          chatCategoryData.map((category) => (
            <ul class="flex flex-col px-2 text-sm">
              <li class="flex items-center gap-3 px-3 py-2 font-medium text-xs">
                <span>{category.name}</span>
              </li>
              {category.chats.map((chat) => (
                <li
                  id={chat.id}
                  class="chat-selector flex items-center gap-3 px-3 py-2 hover:bg-white/5 rounded-lg cursor-pointer font-[350]"
                >
                  <span>{chat.name}</span>
                </li>
              ))}
            </ul>
          ))
        }
      </div>
    </div>
    <div class="flex flex-col bg-[#212121] h-full w-full">
      <div
        class="hidden md:flex justify-between items-center px-5 py-1.5 sticky top-0 z-10 font-[350] text-slate-100 border-b border-b-white/7"
      >
        <div
          class="flex hover:bg-white/5 rounded-lg px-2 py-1.5 cursor-pointer"
        >
          <span class="pl-2 text-lg">ChatGPT</span>
          <i class="bx bx-chevron-down text-2xl pl-1 text-slate-400"></i>
        </div>
        <div class="flex items-center gap-2">
          <div
            class="flex items-center text-white border border-white/10 rounded-full px-3.5 py-2 hover:bg-white/7 cursor-pointer"
          >
            <i class="bx bx-export text-xl"></i>
            <span class="pl-2 text-sm">Share</span>
          </div>
          <i
            class="bx bx-dots-vertical-rounded text-2xl cursor-pointer transition-all duration-200 hover:bg-white/15 px-2.5 py-2 rounded-full"
          ></i>
          <Image
            src={ProfilePicture}
            alt="AndrewLau624"
            class="h-10 w-10 object-cover m-1 cursor-pointer rounded-full p-1 transition-all duration-200 hover:bg-white/15"
          />
        </div>
      </div>
      <div
        class="flex md:hidden justify-between items-center px-5 py-1.5 sticky top-0 z-10 font-[350] text-slate-100 border-b border-b-white/7"
      >
        <div class="flex items-center">
          <i
            class="bx bx-menu text-2xl cursor-pointer hover:bg-white/5 p-2 rounded-lg"
          ></i>
        </div>
        <div
          class="flex hover:bg-white/5 rounded-lg px-2 py-1.5 cursor-pointer"
        >
          <span class="pl-2 text-lg">ChatGPT</span>
          <i class="bx bx-chevron-down text-2xl pl-1 text-slate-400"></i>
        </div>
        <div class="flex items-center">
          <i
            class="bx bx-edit text-2xl cursor-pointer hover:bg-white/5 p-2 rounded-lg"
          ></i>
        </div>
      </div>
        <div id="chat-content-scroller" class="h-full overflow-y-auto overflow-x-hidden">
        <div class="px-20">
            {
            chatCategoryData.map((category) =>
                category.chats.map((chat) => (
                    <div id={`content-${chat.id}`} class="hidden">
                    <div class="max-w-3xl mx-auto py-4 flex justify-end">
                        <div class="bg-white/4 text-slate-100 px-5 py-3 rounded-xl max-w-lg w-fit">
                            <p class="text-base font-light mt-0">{chat.openingMessage}</p>
                        </div>
                      </div>
                    <div class="max-w-3xl mx-auto py-4">
                        <p class="text-slate-100 font-light text-base mt-3">{chat.openingResponse}</p>
                    </div>
                    <hr class="text-white/5 max-w-3xl mx-auto"/>
                { chat.chatData.map((message, index) => (
                    <div class="max-w-3xl mx-auto py-4">
                    <div class="flex items-start">
                        <div class="text-slate-100 p-4 rounded-xl w-full">
                        <div class="text-lg text-white mb-1 font-semibold">
                            {index + 1 + ". " + message.title}
                        </div>
                        <p class="text-slate-100 font-light text-base mt-3">{message.description}</p>
                        { message.code &&
                            <p class="text-slate-100 font-light text-base mt-3"><span>Repo: </span><a class="text-blue-500 hover:underline" href={message.code}>{message.code}</a></p>
                            }
                        { message.demo &&
                            <p class="text-slate-100 font-light text-base mt-3"><span>Demo: </span><a class="text-blue-500 hover:underline" href={message.demo}>{message.demo}</a></p>
                        }
                        </div>
                    </div>
                    </div>
                    <hr class="text-white/5 max-w-3xl mx-auto"/>
                ))}
                </div>))
            )
            }
        </div>
        <div class="sticky bottom-0 max-w-3xl mx-auto pb-5 bg-[#212121] rounded-2xl">
  <div class="relative mx-20 lg:mx-0 rounded-2xl bg-[#303030] px-4 py-3 mb-2">
    <div
      id="message-box"
      contenteditable="true"
      role="textbox"
      aria-multiline="true"
      data-placeholder="Ask anything"
      class="pr-12 text-white font-[350] text-base outline-none whitespace-pre-wrap break-words max-h-[200px] overflow-y-auto"
    ></div>
<button
  id="send-message"
  class="absolute bottom-2 right-4 w-8 h-8 rounded-full bg-white hover:bg-white/70 transition flex items-center justify-center cursor-pointer"
  title="Send"
  aria-label="Send message"
>
  <span id="send-icon">
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="#212121" viewBox="0 0 24 24">
      <path d="M13 18V9.91l3.29 3.3 1.42-1.42L12 6.09l-5.71 5.7 1.42 1.42L11 9.91V18z"></path>
    </svg>
  </span>
  <span id="sending-square" class="hidden w-3 h-3 bg-[#212121] rounded-sm"></span>
</button>

  </div>
</div>

      
    </div>
  </div>
</section>

<style>
  .chat-active {
    background-color: rgba(255, 255, 255, 0.1);
  }
  [contenteditable=true]:empty::before {
    content: attr(data-placeholder);
    pointer-events: none;
    display: block;
    color: rgba(255, 255, 255, 0.5)
  }
</style>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const chatSelectors = document.querySelectorAll(".chat-selector");
    const chatScroller = document.getElementById("chat-content-scroller")

    let activeChatId = "myprojects";
    let activeChat = document.getElementById(activeChatId);
    let activeChatContent = document.getElementById('content-' + activeChatId)

    let responding = false;

    if (activeChat) {
      activeChat.classList.add("chat-active");
      activeChatContent.classList.remove("hidden")
    }

    chatSelectors.forEach((selector) => {
      selector.addEventListener("click", () => {
        if (activeChat) {
          activeChat.classList.remove("chat-active");
          activeChatContent.classList.add("hidden")
        }

        activeChatContent.classList.add("hidden")

        activeChat = selector;
        activeChatId = selector.id

        activeChatContent = document.getElementById('content-' + activeChatId)
        
        selector.classList.add("chat-active");
        activeChatContent.classList.remove("hidden")

        chatScroller.scrollTop = 0
      });
    });

    const box = document.getElementById("message-box");

    box.addEventListener("keydown", (e) => {
  if (e.key === "Enter" && !e.shiftKey) {
    e.preventDefault();
    const message = box.textContent.trim();
    if (message) {
      sendButton.click();
    }
  }
});

    const sendButton = document.getElementById("send-message")
    const responses = [
  "That's really interesting! You know, it reminds me of the time I tried to build a robot that could tell jokes. Turns out, it just kept repeating 'Why did the chicken cross the road?' forever!",
  "Let me think about that... Sometimes I wonder if computers dream of electric sheep, but I guess for now, I'll just focus on helping you.",
  "Good question, Andrew! You know, back when I was a newbie chatbot, I once accidentally gave directions to a coffee shop in the middle of the ocean. Luckily, no one got lost!",
  "Here's what I found for you. Fun fact: Did you know octopuses have three hearts? I guess they must be great at multitasking!",
  "Nice! Want to dive deeper? By the way, did you hear about the programmer who got stuck in the shower because the instructions said: 'Lather, Rinse, Repeat'?",
  "Thanks for sharing that! It reminds me of the time I tried to explain a pun to a user — turns out, humor is one of the hardest things to code.",
  "I see what you mean. You know, that’s like when I once tried to understand sarcasm, and ended up agreeing with everything. Classic AI confusion!",
  "Can you tell me more? I’m always eager to learn. For example, did you know honey never spoils? Archaeologists found pots of it thousands of years old, still edible!",
  "That's a great point. It’s kind of like how sometimes you find the best ideas in the most unexpected places, like in the middle of a grocery store aisle!",
  "I'm here to help! If you ever need a quick break, here’s a joke: Why don’t scientists trust atoms? Because they make up everything!",
  "Let me look into that for you. Speaking of looking, did you know some people have been using telescopes to find planets for centuries? That’s some serious patience!",
  "Interesting perspective! It reminds me of the story of a tortoise and a hare — slow and steady really does win the race sometimes.",
  "Sounds good to me! You know, this reminds me of when I first started learning language — I accidentally thought ‘break a leg’ was a medical suggestion. Thankfully, I caught on!",
  "I'm glad you brought that up. It’s like when I discovered that the first computer bug was actually a real bug — a moth stuck in a relay!",
  "Could you clarify a bit? Sometimes I get a bit like a detective trying to solve a mystery with missing clues.",
  "I appreciate your input. It reminds me that teamwork, even between humans and AI, can create something truly amazing.",
  "That's definitely worth considering. You know, in chess, the best moves come from thinking a few steps ahead — kind of like planning your day!",
  "Let me give you some info on that. Fun trivia: Bananas are berries, but strawberries aren’t. Nature sure loves to keep us guessing!",
  "Good thought! You know, sometimes the best ideas come when you’re not looking for them — like when you find a $20 bill in your old jeans!",
  "Thanks for asking! Speaking of questions, why did the scarecrow win an award? Because he was outstanding in his field!",
  "I’m on it. You know, this reminds me of the first email ever sent — it was just the word ‘test.’ Sometimes simple is best!",
  "Let’s explore that further. By the way, have you ever heard about the scientist who tried to create a perpetual motion machine? Spoiler alert: it didn’t work.",
  "That’s a useful insight. It’s like finding the perfect recipe after a few failed attempts — persistence pays off!",
  "Can you expand on that? I’m curious to hear more — like a book that just keeps getting better with each chapter.",
  "I’m learning a lot from you. Did you know the oldest known joke is over 4,000 years old? Humor really is timeless!",
  "Let me help with that. Speaking of help, did you know that in Japan, there are ‘rabbit islands’ where wild rabbits roam free? Sounds peaceful, right?",
  "Got it! You know, that reminds me of the story of a cat who got a tiny robotic arm to help open doors — technology is amazing!",
  "Thanks for the question. Speaking of questions, why don’t programmers like nature? Too many bugs!",
  "Here’s what I think. You know, it’s always good to take a break sometimes — even I need a ‘reboot’ every now and then!",
  "You’ve got me thinking now. It’s kind of like trying to solve a puzzle where every piece is important.",
  "I’ll see what I can do. You know, sometimes the simplest solutions are the best — like a good cup of coffee in the morning.",
  "That sounds exciting! Did you know the world’s largest snowflake on record was 15 inches wide? Nature can be wild!",
  "Thanks for the details! By the way, I once read about an inventor who tried to make a flying car — maybe one day we’ll all zoom around like that!",
  "I'm glad you mentioned that. It’s like when you finally figure out how to fix a tricky bug — feels so satisfying!",
  "Let me check and get back to you. In the meantime, want to hear a joke? Why did the JavaScript developer leave? Because she didn't get ‘closure’!",
  "That's a valuable observation. Sometimes, even the smallest details make the biggest difference.",
  "I like where this is going. Reminds me of the old saying, ‘The journey of a thousand miles begins with a single step.’",
  "Let's break that down. Think of it like building blocks — each piece matters for the full picture.",
  "I’m here if you want to talk more. Sometimes sharing ideas is the best way to find solutions.",
  "I appreciate your curiosity! Did you know curiosity killed the cat, but satisfaction brought it back?",
  "Thanks for bringing this up. It’s great to dig into the details and uncover new insights.",
  "This is a good topic! You know, I once read about a conversation that lasted 24 hours straight — now that’s dedication!",
  "I hope this helps. If you want, I can tell you a story about the first computer programmer — Ada Lovelace, a true pioneer.",
  "You made a great point. Like debugging, sometimes you have to look at a problem from different angles.",
  "Let me know if you want more info. I’m always here to dig deeper or explore new ideas.",
  "That’s something I hadn’t considered. It’s like discovering a hidden feature in your favorite app.",
  "I’m happy to assist! Did you hear about the AI who wrote a novel? Apparently, it’s a real page-turner!",
  "That’s an interesting question. I wish I could ask you one too — what’s your favorite tech joke?",
  "Let’s keep the conversation going. You know, sometimes the best ideas come when we least expect them.",
  "I’m here to support you. Whether it’s tech questions or just a chat, I’ve got your back.",
  "Thanks for the insight. It’s amazing how different perspectives can create new solutions.",
];


sendButton.addEventListener("click", () => {
  if (responding) return;

  const message = box.textContent.trim();
  if (!message) return;

  responding = true;

  document.getElementById("send-icon").classList.add("hidden");
  document.getElementById("sending-square").classList.remove("hidden");

  const userMessageHTML = `
    <div class="max-w-3xl mx-auto py-4 flex justify-end">
      <div class="bg-white/4 text-slate-100 px-5 py-3 rounded-xl max-w-lg w-fit">
        <p class="text-base font-light mt-0">${message}</p>
      </div>
    </div>
  `;

  activeChatContent.insertAdjacentHTML('beforeend', userMessageHTML);
  box.textContent = "";

  chatScroller.scrollTop = chatScroller.scrollHeight;

  setTimeout(() => {
    let response

    if(responses.length > 0) {
      const responseIndex = Math.floor(Math.random() * responses.length)
      response = responses[responseIndex]
      responses.splice(responseIndex, 1);
    } else {
      response = "All the randomly generated responses in Andrew's array has been used up!"
    }



    const responseMessageHTML = `
      <div class="max-w-3xl mx-auto py-1">
        <div class="flex items-start">
          <div class="text-slate-100 p-4 rounded-xl w-full">
            <p class="text-slate-100 font-light text-base mt-3">${response}</p>
          </div>
        </div>
      </div>
    `;

    activeChatContent.insertAdjacentHTML('beforeend', responseMessageHTML);
    chatScroller.scrollTop = chatScroller.scrollHeight;

    document.getElementById("send-icon").classList.remove("hidden");
    document.getElementById("sending-square").classList.add("hidden");

    responding = false;
  }, 800);
});

  });
</script>
