---
const navItems = [
  { href: "#home", label: "Home" },
  { href: "#about", label: "About" },
  { href: "#projects", label: "Projects" },
];
---

<style>
  @keyframes blink {
    0%,
    100% {
      opacity: 0;
    }
    50% {
      opacity: 1;
    }
  }

  .animate-blink {
    animation: blink 1s step-end infinite;
  }

  .caret-custom {
    position: absolute;
    top: 0;
    user-select: none;
  }

  .hidden-measure {
    visibility: hidden;
    position: absolute;
    white-space: pre;
    font-family: inherit;
    font-size: inherit;
  }

  #terminal-path::selection {
    background: none;
    color: inherit;
  }

  input:focus {
    outline: none;
    caret-color: transparent;
  }
</style>

<nav class="fixed w-[100vw] bg-[#1B2027] px-4 py-3 z-50 h-13">
  <div class="flex items-center justify-between w-full">
    <div class="flex items-center gap-4 flex-grow">
      <ul class="flex items-center gap-4 text-slate-200 text-xl">
        <li>
          <a
            href="https://linkedin.com/in/andrew-lau-dev"
            target="_blank"
            rel="noopener noreferrer"
            aria-label="LinkedIn"
          >
            <i class="bx bxl-linkedin-square"></i>
          </a>
        </li>
        <li>
          <a
            href="https://github.com/andrewlau624"
            target="_blank"
            rel="noopener noreferrer"
            aria-label="Github"
          >
            <i class="bx bxl-github"></i>
          </a>
        </li>
        <li>
          <a
            href="https://instagram.com/andrewl.au"
            target="_blank"
            rel="noopener noreferrer"
            aria-label="Instagram"
          >
            <i class="bx bxl-instagram"></i>
          </a>
        </li>
        <li>
          <a
            href="mailto:andrew.lau@berkeley.edu"
            id="email-link"
            target="_blank"
            aria-label="Gmail"
            rel="noopener noreferrer"
            data-obfuscation="3"
          >
            <i class="bx bxl-gmail"></i>
          </a>
        </li>
      </ul>
      <div
        class="bg-[#212730] px-3 py-1 rounded-lg flex-grow min-w-0 hidden lg:flex"
      >
        <div
          class="relative flex flex-nowrap overflow-hidden text-base min-w-0 w-full cursor-default select-none"
          id="terminal-container"
        >
          <span id="terminal-prefix" class="cursor-default"
            >C:\Users\andrewlau.dev\</span
          >
          <input
            id="terminal-path"
            class="border-none caret-transparent bg-transparent text-white w-full cursor-default selection:bg-white"
            maxlength="8"
            spellcheck="false"
            autocomplete="off"
          />
          <span id="caret" class="animate-blink caret-custom">â–ˆ</span>
          <span id="text-measure" class="hidden-measure"></span>
        </div>
      </div>
    </div>
    <ul
      class="flex flex-nowrap items-center justify-center gap-6 text-slate-200 text-xl pl-5"
    >
      {
        navItems.map((item) => (
          <li class="flex items-center justify-center text-center">
            <a
              href={item.href}
              class="hover:underline text-base"
              data-astro-reload
            >
              {item.label}
            </a>
          </li>
        ))
      }
    </ul>
  </div>
</nav>

<script is:inline>
  const navRoutes = new Set(["home", "about", "projects"]);

  const input = document.getElementById("terminal-path");
  const caret = document.getElementById("caret");
  const measure = document.getElementById("text-measure");
  const prefix = document.getElementById("terminal-prefix");

  function updateCaret() {
    if (!input || !caret || !measure || !prefix) return;

    const caretPos = input.selectionStart ?? input.value.length;
    const beforeCaret = input.value.slice(0, caretPos);

    measure.textContent = prefix.textContent + beforeCaret;
    const width = measure.offsetWidth;

    caret.style.left = `${width}px`;
    caret.style.color =
      document.activeElement === input ? "white" : "transparent";
  }

  function updateTerminalPath() {
    const hash = location.hash.substring(1) || "Home";
    input.value = hash;

    updateCaret();
  }

  const updateEvents = ["input", "keyup", "click", "select", "pointerup"];
  updateEvents.forEach((event) => {
    input.addEventListener(event, updateCaret);
  })

  input.addEventListener("keydown", (e) => {
    if (e.key === "Enter") {
      const val = input.value.trim();
      const validHref = navRoutes.has(val);
      if (validHref) {
        location.hash = val;
      }
    }
  });

  input.addEventListener("focus", () => {
    if (caret) {
      caret.style.color = "white";
      caret.style.opacity = "1";
    }
  });

  input.addEventListener("blur", () => {
    if (caret) caret.style.color = "transparent";
  });

  document.addEventListener("astro:after-swap", () => {
    updateTerminalPath();
  });

  window.addEventListener("DOMContentLoaded", () => {
    updateTerminalPath();
    updateCaret();
  });
</script>
